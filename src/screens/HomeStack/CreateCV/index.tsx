import React, { useCallback, useEffect, useState } from 'react';
import { launchImageLibrary } from 'react-native-image-picker';
import Toast from 'react-native-toast-message';
import {
  View,
  Text,
  Image,
  TouchableOpacity,
  ScrollView,
  StyleSheet,
  TextInput,
} from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import AppStyles from '../../../components/AppStyle';
import icons from '../../../assets/icons';
import { ms, spacing } from '../../../utils/spacing';
import { colors } from '../../../utils/color';
import images from '../../../assets/images';
import { Fonts } from '../../../utils/fontSize';
import AppButton from '../../../components/AppButton';
import { navigate } from '../../../navigation/RootNavigator';
import { Screen_Name } from '../../../navigation/ScreenName';
import { useCVData } from './useCVData';
import { createCV } from '../../../services/cv';
import { useSelector } from 'react-redux';
import NavBar from '../../../components/Navbar';

interface Props {
  navigation: any;
}
// Helper function ƒë·ªÉ format date cho hi·ªÉn th·ªã (yyyy-mm-dd -> dd/mm/yyyy)
const formatDateForDisplay = (dateString: string) => {
  if (!dateString) return '';

  // N·∫øu l√† format yyyy-mm-dd th√¨ convert sang dd/mm/yyyy
  if (/^\d{4}-\d{2}-\d{2}$/.test(dateString)) {
    const [year, month, day] = dateString.split('-');
    return `${day}/${month}/${year}`;
  }

  // N·∫øu l√† format yyyy-mm-01 th√¨ convert sang mm/yyyy
  if (/^\d{4}-\d{2}-01$/.test(dateString)) {
    const [year, month] = dateString.split('-');
    return `${month}/${year}`;
  }

  return dateString; // Tr·∫£ v·ªÅ nguy√™n b·∫£n n·∫øu kh√¥ng match
};

// Helper function ƒë·ªÉ t·∫°o UUID gi·∫£ l·∫≠p cho photo path
const generatePhotoPath = () => {
  const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(
    /[xy]/g,
    function (c) {
      const r = (Math.random() * 16) | 0;
      const v = c == 'x' ? r : (r & 0x3) | 0x8;
      return v.toString(16);
    },
  );
  return `/uploads/cv/photo-card/${uuid}.jpg`;
};

const CreateCVScreen: React.FC<Props> = ({ navigation }) => {
  const { token } = useSelector((state: any) => state.user);
  const [avatarUri, setAvatarUri] = useState<string>('');
  const insets = useSafeAreaInsets();

  // S·ª≠ d·ª•ng hook qu·∫£n l√Ω data CV
  const {
    title,
    setTitle,
    photoCard,
    setPhotoCard,
    name,
    content,
    birthday: birthday,
    gender,
    phone,
    email,
    website,
    address,
    educations,
    experience: experiences,
    certificate,
    skills,
    sections,
    updateSection,
    removeSection,
    getCVData,
  } = useCVData();

  // H√†m ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn EditCVScreen
  const goToEditCV = (sectionKey, sectionTitle, fields) => {
    let currentData: any = null;
    switch (sectionKey) {
      case 'userProfile':
        currentData = {
          name,
          content,
          birthday,
          gender,
          phone,
          email,
          website,
          address,
        };
        break;
      case 'educations':
        currentData = educations;
        break;
      case 'experiences':
        currentData = experiences;
        break;
      case 'certificate':
        currentData = certificate;
        break;
      case 'skills':
        currentData = skills;
        break;
      case 'card':
        currentData = {
          name,
          content,
        };
        break;
      default:
        break;
    }
    navigate(Screen_Name.EditCV_Screen, {
      title: sectionTitle,
      fields,
      initialData: currentData,
      onSave: data => {
        updateSection(sectionKey, data);
      },
    });
  };

  const handleEditField = (sectionKey, sectionTitle, fields) => {
    // Map UI keys to state keys for core fields only
    const keyMap = {
      educations: 'educations',
      skills: 'skills',
      experiences: 'experiences',
      certificate: 'certificate',
      card: 'card',
      userProfile: 'userProfile',
    };
    const stateKey = keyMap[sectionKey] || sectionKey;
    goToEditCV(stateKey, sectionTitle, fields);
  };

  const handleAddCustomSection = () => {
    navigate(Screen_Name.EditCV_Screen, {
      title: 'Th√™m tr∆∞·ªùng t√πy ch·ªânh',
      fields: [
        {
          key: 'title',
          label: 'Ti√™u ƒë·ªÅ ph·∫ßn',
          placeholder: 'Nh·∫≠p ti√™u ƒë·ªÅ ph·∫ßn (VD: D·ª± √°n, Ho·∫°t ƒë·ªông...)',
          keyboard: 'default',
        },
        {
          key: 'content',
          label: 'N·ªôi dung ph·∫ßn',
          placeholder: 'Nh·∫≠p n·ªôi dung cho ph·∫ßn n√†y',
          keyboard: 'default',
        },
      ],
      initialData: null,
      sectionKey: 'sections', // ƒê√°nh d·∫•u ƒë√¢y l√† custom section
      onSave: data => {
        // T·∫°o custom section object v·ªõi unique sectionType
        const timestamp = Date.now();
        const baseType =
          data.title?.toLowerCase().replace(/\s+/g, '') || 'custom';
        const customSection = {
          sectionType: `${baseType}_${timestamp}`, // Th√™m timestamp ƒë·ªÉ unique
          title: data.title || 'Tr∆∞·ªùng t√πy ch·ªânh',
          content: data.content || '',
          isVisible: true,
        };
        console.log('ƒêang th√™m custom section:', customSection);
        updateSection('sections', customSection);

        // Log CV data sau khi th√™m
        setTimeout(() => {
          const cvData = getCVData();
          console.log(
            'CV ƒë√£ t·∫°o sau khi th√™m custom section:',
            JSON.stringify(cvData, null, 2),
          );
        }, 100);
      },
    });
  };
  console.log('avatar', avatarUri);

  return (
    <View style={[styles.container]}>
      {token ? (
        <>
          <View style={[styles.header, { paddingTop: insets.top }]}>
            {/* Header */}
            <View style={styles.headerTitleContainer}>
              <TextInput
                style={[AppStyles.title, { paddingLeft: ms(40) }]}
                placeholder="Enter CV Title"
                onChangeText={text => setTitle(text)}
                value={title}
                autoCapitalize="none"
              />
            </View>
            <TouchableOpacity>
              <Image source={icons.edit} style={AppStyles.icon} />
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.content}>
            <View style={styles.contentWrap}>
              <View style={styles.headerContent}>
                <TouchableOpacity
                  onPress={async () => {
                    const result = await launchImageLibrary({
                      mediaType: 'photo',
                    });
                    if (result.assets && result.assets.length > 0) {
                      const uri = result.assets[0].uri;
                      if (typeof uri === 'string') {
                        setAvatarUri(uri);

                        // T·∫°o ƒë∆∞·ªùng d·∫´n ·∫£nh gi·∫£ l·∫≠p (nh∆∞ sau khi upload l√™n API)
                        const simulatedPhotoPath = generatePhotoPath();
                        console.log(
                          'ƒê∆∞·ªùng d·∫´n ·∫£nh sau khi upload:',
                          simulatedPhotoPath,
                        );

                        // L∆∞u ƒë∆∞·ªùng d·∫´n ·∫£nh v√†o photoCard c·ªßa CVData
                        setPhotoCard(simulatedPhotoPath);

                        // Hi·ªÉn th·ªã toast th√¥ng b√°o
                        Toast.show({
                          type: 'success',
                          text1: '·∫¢nh ƒë√£ ƒë∆∞·ª£c ch·ªçn! üì∑',
                          text2: 'ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o CV',
                          visibilityTime: 3000,
                        });

                        // Log CVData sau khi c·∫≠p nh·∫≠t ·∫£nh
                        setTimeout(() => {
                          const cvData = getCVData();
                          console.log('=== CV Data sau khi c·∫≠p nh·∫≠t ·∫£nh ===');
                          console.log('PhotoCard:', cvData.photoCard);
                          console.log('=== CV Data ho√†n ch·ªânh ===');
                          console.log(JSON.stringify(cvData, null, 2));
                        }, 100);
                      }
                    }
                  }}
                >
                  <Image
                    source={avatarUri ? { uri: avatarUri } : images.avt}
                    style={styles.avtImage}
                  />
                </TouchableOpacity>
                <View style={styles.info}>
                  <TouchableOpacity
                    style={styles.card}
                    onPress={() =>
                      handleEditField('card', 'Card', [
                        { key: 'name', label: 'T√™n', placeholder: 'Nh·∫≠p t√™n' },
                        {
                          key: 'content',
                          label: 'V·ªã tr√≠ ·ª©ng tuy·ªÉn',
                          placeholder: 'Nh·∫≠p v·ªã tr√≠ ·ª©ng tuy·ªÉn',
                          keyboard: 'default',
                        },
                      ])
                    }
                  >
                    <Text style={AppStyles.title}>{name || 'H·ªç v√† t√™n'}</Text>
                    <Text style={AppStyles.text}>
                      {content || 'V·ªã tr√≠ ·ª©ng tuy·ªÉn'}
                    </Text>
                  </TouchableOpacity>

                  {/* Info */}
                  <TouchableOpacity
                    style={styles.userInfo}
                    onPress={() =>
                      handleEditField('userProfile', 'Th√¥ng tin c√° nh√¢n', [
                        {
                          key: 'birthday',
                          label: 'Ng√†y sinh',
                          placeholder: 'Nh·∫≠p ng√†y sinh',
                        },
                        {
                          key: 'gender',
                          label: 'Gi·ªõi t√≠nh',
                          placeholder: 'Nh·∫≠p gi·ªõi t√≠nh',
                        },
                        {
                          key: 'phone',
                          label: 'S·ªë ƒëi·ªán tho·∫°i',
                          placeholder: 'Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i',
                          keyboard: 'phone-pad',
                        },
                        {
                          key: 'email',
                          label: 'Email',
                          placeholder: 'Nh·∫≠p email',
                        },
                        {
                          key: 'website',
                          label: 'Website',
                          placeholder: 'Nh·∫≠p website',
                          keyboard: 'email-address',
                        },
                        {
                          key: 'address',
                          label: 'ƒê·ªãa ch·ªâ',
                          placeholder: 'Nh·∫≠p ƒë·ªãa ch·ªâ',
                        },
                      ])
                    }
                  >
                    <Text>
                      Ng√†y sinh:{' '}
                      {birthday ? formatDateForDisplay(birthday) : ''}
                    </Text>
                    <Text>Gi·ªõi t√≠nh: {gender || ''}</Text>
                    <Text>S·ªë ƒëi·ªán tho·∫°i: {phone || ''}</Text>
                    <Text>Email: {email || ''}</Text>
                    <Text>Website: {website || ''}</Text>
                    <Text>ƒê·ªãa ch·ªâ: {address || ''}</Text>
                  </TouchableOpacity>
                </View>
              </View>
              <View style={styles.bodyContent}>
                {/* Education */}
                <TouchableOpacity
                  style={styles.bodyContentItem}
                  onPress={() =>
                    handleEditField('educations', 'H·ªçc v·∫•n', [
                      {
                        key: 'institutionName',
                        label: 'T√™n tr∆∞·ªùng/h·ªçc vi·ªán',
                        placeholder: 'Nh·∫≠p t√™n tr∆∞·ªùng/h·ªçc vi·ªán',
                      },
                      {
                        key: 'degree',
                        label: 'B·∫±ng c·∫•p',
                        placeholder: 'Nh·∫≠p b·∫±ng c·∫•p',
                      },
                      {
                        key: 'fieldOfStudy',
                        label: 'Ng√†nh h·ªçc',
                        placeholder: 'Nh·∫≠p ng√†nh h·ªçc',
                      },
                      {
                        key: 'startDate',
                        label: 'Th·ªùi gian b·∫Øt ƒë·∫ßu',
                        placeholder: 'YYYY-MM-DD',
                      },
                      {
                        key: 'endDate',
                        label: 'Th·ªùi gian k·∫øt th√∫c',
                        placeholder: 'YYYY-MM-DD',
                      },
                      {
                        key: 'description',
                        label: 'Th√¥ng tin th√™m',
                        placeholder: 'Th√†nh t√≠ch, ƒëi·ªÉm s·ªë...',
                      },
                    ])
                  }
                >
                  <View style={styles.title_underLine}>
                    <Text style={styles.title}>H·ªåC V·∫§N</Text>
                  </View>
                  {/* Education */}
                  {Array.isArray(educations) && educations.length > 0 ? (
                    educations.map((edu, idx) => (
                      <View
                        style={{ flexDirection: 'row', marginBottom: 16 }}
                        key={idx}
                      >
                        <View style={{ width: '35%' }}>
                          <Text style={{ fontWeight: 'bold', fontSize: 15 }}>
                            {edu.startDate && edu.endDate
                              ? `${formatDateForDisplay(
                                  edu.startDate,
                                )} - ${formatDateForDisplay(edu.endDate)}`
                              : 'B·∫Øt ƒë·∫ßu - K·∫øt th√∫c'}
                          </Text>
                        </View>
                        <View style={{ flexShrink: 1, width: '70%' }}>
                          <Text style={{ fontWeight: 'bold', fontSize: 16 }}>
                            {edu.institutionName || 'T√™n tr∆∞·ªùng/h·ªçc vi·ªán:'}
                          </Text>
                          <Text style={{ fontSize: 15 }}>
                            {edu.fieldOfStudy || 'Ng√†nh h·ªçc'}
                          </Text>
                          <Text style={{ fontSize: 15 }}>
                            {edu.degree || 'B·∫±ng c·∫•p'}
                          </Text>
                          <Text style={{ fontSize: 15 }}>
                            {edu.description || 'Th√¥ng tin th√™m'}
                          </Text>
                        </View>
                      </View>
                    ))
                  ) : (
                    <View style={{ width: '100%' }}>
                      <Text style={{ fontWeight: 'bold', fontSize: 15 }}>
                        B·∫Øt ƒë·∫ßu - K·∫øt th√∫c
                      </Text>
                      <Text style={{ fontWeight: 'bold', fontSize: 16 }}>
                        T√™n tr∆∞·ªùng/h·ªçc vi·ªán
                      </Text>
                      <Text style={{ fontSize: 15 }}>Ng√†nh h·ªçc</Text>
                      <Text style={{ fontSize: 15 }}>
                        M√¥ t·∫£ qu√° tr√¨nh h·ªçc t·∫≠p ho·∫∑c th√†nh t√≠ch c·ªßa b·∫°n
                      </Text>
                    </View>
                  )}
                </TouchableOpacity>
                {/* Experience */}
                <TouchableOpacity
                  style={styles.bodyContentItem}
                  onPress={() =>
                    handleEditField('experiences', 'Kinh nghi·ªám l√†m vi·ªác', [
                      {
                        key: 'jobTitle',
                        label: 'Ch·ª©c danh c√¥ng vi·ªác',
                        placeholder: 'Nh·∫≠p ch·ª©c danh c√¥ng vi·ªác',
                      },
                      {
                        key: 'companyName',
                        label: 'T√™n c√¥ng ty',
                        placeholder: 'Nh·∫≠p t√™n c√¥ng ty',
                      },
                      {
                        key: 'startDate',
                        label: 'Ng√†y b·∫Øt ƒë·∫ßu',
                        placeholder: 'YYYY-MM-DD',
                      },
                      {
                        key: 'endDate',
                        label: 'Ng√†y k·∫øt th√∫c',
                        placeholder: 'YYYY-MM-DD',
                      },
                      {
                        key: 'description',
                        label: 'M√¥ t·∫£ c√¥ng vi·ªác',
                        placeholder: 'M√¥ t·∫£ c√¥ng vi·ªác, nhi·ªám v·ª• ch√≠nh',
                      },
                    ])
                  }
                >
                  <View style={styles.title_underLine}>
                    <Text style={styles.title}>KINH NGHI·ªÜM L√ÄM VI·ªÜC</Text>
                  </View>
                  {/* Experience */}
                  {Array.isArray(experiences) && experiences.length > 0 ? (
                    experiences.map((exp, idx) => (
                      <View key={idx} style={{ flexDirection: 'row' }}>
                        <View style={{ width: '35%' }}>
                          <Text style={{ fontWeight: 'bold', fontSize: 15 }}>
                            {exp.startDate && exp.endDate
                              ? `${formatDateForDisplay(
                                  exp.startDate,
                                )} - ${formatDateForDisplay(exp.endDate)}`
                              : 'B·∫Øt ƒë·∫ßu - K·∫øt th√∫c'}
                          </Text>
                        </View>
                        <View style={{ flexShrink: 1, width: '70%' }}>
                          <Text style={{ fontWeight: 'bold', fontSize: 16 }}>
                            {exp.companyName || 'T√™n c√¥ng ty:'}
                          </Text>
                          <Text style={{ fontSize: 15 }}>
                            {exp.jobTitle || 'Ch·ª©c danh c√¥ng vi·ªác'}
                          </Text>
                          <Text style={{ fontSize: 15 }}>
                            {exp.description || 'M√¥ t·∫£ c√¥ng vi·ªác'}
                          </Text>
                        </View>
                      </View>
                    ))
                  ) : (
                    <View style={{ width: '100%' }}>
                      <Text style={{ fontWeight: 'bold', fontSize: 15 }}>
                        B·∫Øt ƒë·∫ßu - K·∫øt th√∫c
                      </Text>
                      <Text style={{ fontWeight: 'bold', fontSize: 16 }}>
                        T√™n c√¥ng ty
                      </Text>
                      <Text style={{ fontSize: 15 }}>V·ªã tr√≠ c√¥ng vi·ªác</Text>
                      <Text style={{ fontSize: 15 }}>
                        M√¥ t·∫£ kinh nghi·ªám l√†m vi·ªác ho·∫∑c th√†nh t√≠ch c·ªßa b·∫°n
                      </Text>
                    </View>
                  )}
                </TouchableOpacity>

                {/* Certificate */}
                {/* Certificate */}
                <TouchableOpacity
                  style={styles.bodyContentItem}
                  onPress={() =>
                    handleEditField('certificate', 'Ch·ª©ng ch·ªâ', [
                      {
                        key: 'name',
                        label: 'T√™n ch·ª©ng ch·ªâ',
                        placeholder: 'Nh·∫≠p t√™n ch·ª©ng ch·ªâ',
                      },
                      {
                        key: 'issueDate',
                        label: 'Ng√†y c·∫•p',
                        placeholder: 'YYYY-MM-DD',
                      },
                      {
                        key: 'expiryDate',
                        label: 'Ng√†y h·∫øt h·∫°n',
                        placeholder: 'YYYY-MM-DD (t√πy ch·ªçn)',
                      },
                    ])
                  }
                >
                  <View style={styles.title_underLine}>
                    <Text style={styles.title}>CH·ª®NG CH·ªà</Text>
                  </View>
                  {Array.isArray(certificate) ? (
                    certificate.length > 0 ? (
                      certificate.map((cert, idx) => (
                        <View
                          key={idx}
                          style={{ flexDirection: 'row', marginBottom: 16 }}
                        >
                          <View style={{ width: '35%' }}>
                            <Text style={{ fontWeight: 'bold', fontSize: 15 }}>
                              {cert.issueDate
                                ? formatDateForDisplay(cert.issueDate)
                                : 'Ng√†y c·∫•p'}
                            </Text>
                          </View>
                          <View style={{ flexShrink: 1, width: '70%' }}>
                            <Text style={{ fontWeight: 'bold', fontSize: 16 }}>
                              {cert.name || 'T√™n ch·ª©ng ch·ªâ'}
                            </Text>
                            <Text style={{ fontSize: 15 }}>
                              {cert.expiryDate
                                ? formatDateForDisplay(cert.expiryDate)
                                : 'Ng√†y h·∫øt h·∫°n'}
                            </Text>
                          </View>
                        </View>
                      ))
                    ) : (
                      <View style={{ width: '100%' }}>
                        <Text style={{ fontWeight: 'bold', fontSize: 15 }}>
                          NƒÉm
                        </Text>
                        <Text style={{ fontWeight: 'bold', fontSize: 16 }}>
                          T√™n ch·ª©ng ch·ªâ
                        </Text>
                      </View>
                    )
                  ) : (
                    <View style={{ width: '100%' }}>
                      <Text style={{ fontWeight: 'bold', fontSize: 15 }}>
                        NƒÉm
                      </Text>
                      <Text style={{ fontWeight: 'bold', fontSize: 16 }}>
                        T√™n ch·ª©ng ch·ªâ
                      </Text>
                    </View>
                  )}
                </TouchableOpacity>
                {/* Skill */}
                <TouchableOpacity
                  style={styles.bodyContentItem}
                  onPress={() =>
                    handleEditField('skills', 'K·ªπ nƒÉng', [
                      {
                        key: 'skillName',
                        label: 'T√™n k·ªπ nƒÉng',
                        placeholder: 'Nh·∫≠p t√™n k·ªπ nƒÉng',
                      },
                      {
                        key: 'category',
                        label: 'Ph√¢n lo·∫°i k·ªπ nƒÉng',
                        placeholder: 'Technical, Soft...',
                      },

                      {
                        key: 'proficiencyType',
                        label: 'M·ª©c ƒë·ªô th√†nh th·∫°o',
                        placeholder: 'Ch·ªçn m·ª©c ƒë·ªô',
                      },
                    ])
                  }
                >
                  <View style={styles.title_underLine}>
                    <Text style={styles.title}>K·ª∏ NƒÇNG</Text>
                  </View>
                  {/* Skill */}
                  {Array.isArray(skills) && skills.length > 0 ? (
                    skills.map((sk, idx) => (
                      <View
                        key={idx}
                        style={{ flexDirection: 'row', marginBottom: 16 }}
                      >
                        <View style={{ width: '35%' }}>
                          <Text style={{ fontWeight: 'bold', fontSize: 15 }}>
                            {sk.skillName || 'T√™n k·ªπ nƒÉng'}
                          </Text>
                        </View>
                        <View style={{ flexShrink: 1, width: '70%' }}>
                          <Text style={{ fontSize: 15 }}>
                            {sk.category || 'Ph√¢n lo·∫°i k·ªπ nƒÉng'}
                          </Text>
                          <Text style={{ fontSize: 15 }}>
                            {sk.proficiencyLevel
                              ? `Level: ${sk.proficiencyLevel}`
                              : 'M·ª©c ƒë·ªô th√†nh th·∫°o'}
                          </Text>
                          <Text style={{ fontSize: 15 }}>
                            {sk.proficiencyType || 'Lo·∫°i th√†nh th·∫°o'}
                          </Text>
                        </View>
                      </View>
                    ))
                  ) : (
                    <View style={{ width: '100%' }}>
                      <Text style={{ fontWeight: 'bold', fontSize: 15 }}>
                        T√™n k·ªπ nƒÉng
                      </Text>
                      <Text style={{ fontSize: 15 }}>M√¥ t·∫£ k·ªπ nƒÉng</Text>
                    </View>
                  )}
                </TouchableOpacity>
              </View>

              {/* Custom Sections */}
              {Array.isArray(sections) &&
                sections.length > 0 &&
                sections.map((section, index) => (
                  <View key={index} style={styles.bodyContentItem}>
                    <TouchableOpacity
                      style={styles.bodyContentItem}
                      onPress={() => {
                        navigate(Screen_Name.EditCV_Screen, {
                          title: section.title,
                          fields: [
                            {
                              key: 'title',
                              label: 'Ti√™u ƒë·ªÅ ph·∫ßn',
                              placeholder: 'Nh·∫≠p ti√™u ƒë·ªÅ ph·∫ßn',
                            },
                            {
                              key: 'content',
                              label: 'N·ªôi dung ph·∫ßn',
                              placeholder: 'Nh·∫≠p n·ªôi dung cho ph·∫ßn n√†y',
                            },
                          ],
                          initialData: {
                            title: section.title,
                            content: section.content,
                          },
                          sectionKey: 'sections',
                          onSave: data => {
                            const updatedSection = {
                              sectionType: section.sectionType,
                              title: data.title || section.title,
                              content: data.content || '',
                              isVisible: true,
                            };
                            console.log(
                              'ƒêang c·∫≠p nh·∫≠t custom section:',
                              updatedSection,
                            );
                            updateSection('sections', updatedSection);

                            // Log CV data sau khi c·∫≠p nh·∫≠t
                            setTimeout(() => {
                              const cvData = getCVData();
                              console.log(
                                'CV sau khi c·∫≠p nh·∫≠t custom section:',
                                JSON.stringify(cvData, null, 2),
                              );
                            }, 100);
                          },
                        });
                      }}
                    >
                      <View style={styles.title_underLine}>
                        <View
                          style={{
                            flexDirection: 'row',
                            justifyContent: 'space-between',
                            alignItems: 'center',
                          }}
                        >
                          <Text style={styles.title}>
                            {(
                              section.title || 'TR∆Ø·ªúNG T√ôY CH·ªàNH'
                            ).toUpperCase()}
                          </Text>
                          <TouchableOpacity
                            onPress={() => {
                              // X√≥a section b·∫±ng sectionType
                              if (section.sectionType) {
                                removeSection(section.sectionType);
                                console.log('ƒê√£ x√≥a custom section:', section);
                              }
                            }}
                            style={{ padding: 5 }}
                          >
                            <Text style={{ color: 'red', fontSize: 18 }}>
                              üóëÔ∏è
                            </Text>
                          </TouchableOpacity>
                        </View>
                      </View>
                      <View style={{ width: '100%' }}>
                        <Text style={{ fontSize: 15 }}>
                          {section.content || 'Nh·∫•n ƒë·ªÉ ch·ªânh s·ª≠a n·ªôi dung'}
                        </Text>
                      </View>
                    </TouchableOpacity>
                  </View>
                ))}

              {/* Custom Section Button */}
              <TouchableOpacity
                style={styles.addCustomSectionButton}
                onPress={() => handleAddCustomSection()}
              >
                <Text style={styles.addCustomSectionText}>
                  + Th√™m tr∆∞·ªùng t√πy ch·ªânh
                </Text>
              </TouchableOpacity>
            </View>

            <AppButton
              title="L∆∞u CV"
              onPress={async () => {
                try {
                  // L·∫•y t·∫•t c·∫£ data CV (ƒë√£ bao g·ªìm title v√† photoCard)
                  const cvData = getCVData();

                  console.log('=== TH√îNG TIN CV TR∆Ø·ªöC KHI G·ª¨I API ===');
                  console.log('Ti√™u ƒë·ªÅ CV:', cvData.title);
                  console.log('·∫¢nh ƒë·∫°i di·ªán:', cvData.photoCard);
                  console.log('Template ID:', cvData.templateId);
                  console.log('Public Status:', cvData.isPublic);
                  console.log('=== CV DATA HO√ÄN CH·ªàNH ===');
                  console.log(JSON.stringify(cvData, null, 2));

                  // Hi·ªÉn th·ªã loading toast
                  Toast.show({
                    type: 'info',
                    text1: 'ƒêang t·∫°o CV...',
                    text2: 'Vui l√≤ng ƒë·ª£i',
                    visibilityTime: 2000,
                  });

                  // G·ªçi API t·∫°o CV v·ªõi ·∫£nh
                  const imageUri = avatarUri; // URI ·∫£nh th·ª±c t·∫ø t·ª´ device
                  const result = await createCV(cvData, imageUri);

                  // Hi·ªÉn th·ªã Toast th√¥ng b√°o th√†nh c√¥ng
                  Toast.show({
                    type: 'success',
                    text1: 'T·∫°o CV th√†nh c√¥ng! üéâ',
                    text2: `"${
                      cvData.title || 'CV kh√¥ng c√≥ ti√™u ƒë·ªÅ'
                    }" ƒë√£ ƒë∆∞·ª£c t·∫°o`,
                    visibilityTime: 3000,
                  });

                  console.log('=== K·∫æT QU·∫¢ T·∫†O CV ===');
                  console.log('API Response:', result);
                } catch (error) {}
              }}
              customStyle={{ marginBottom: spacing.large }}
            />
          </ScrollView>

          {/* Footer */}
          <View style={styles.footer}></View>
        </>
      ) : (
        <View style={{ padding: spacing.medium, flex: 1 }}>
          <NavBar title="T·∫°o CV" onPress={() => navigation.goBack()} />
          <View
            style={{
              flex: 1,
              justifyContent: 'center',
            }}
          >
            <Text
              style={[
                AppStyles.title,
                { marginTop: spacing.medium, textAlign: 'center' },
              ]}
            >
              Login ƒë·ªÉ t·∫°o CV
            </Text>
          </View>
        </View>
      )}
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: spacing.medium,
    backgroundColor: colors.white,
  },
  headerTitleContainer: {
    marginVertical: spacing.small,
    flexDirection: 'row',
    alignSelf: 'center',
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: spacing.medium,
  },
  content: {
    flex: 1,
    marginVertical: spacing.medium,
    marginHorizontal: spacing.medium,
    backgroundColor: colors.white,
    paddingHorizontal: spacing.medium,
  },
  contentWrap: {},
  headerContent: {
    flexDirection: 'row',
    marginBottom: spacing.large,
  },
  avtImage: {
    width: ms(120),
    height: ms(160),
    marginTop: spacing.small,
    resizeMode: 'cover',
  },
  card: {},
  info: {
    flex: 1,
    marginLeft: spacing.small,
    // backgroundColor: colors.lightGray,
  },
  userInfo: {},
  bodyContent: {},
  bodyContentItem: { marginBottom: spacing.medium },
  footer: {},
  title: { fontSize: Fonts.large, fontWeight: 'bold' },
  title_underLine: {
    borderBottomWidth: 1,
    flex: 1,
    marginBottom: spacing.medium,
  },
  addCustomSectionButton: {
    backgroundColor: colors.primary,
    paddingVertical: spacing.medium,
    paddingHorizontal: spacing.large,
    borderRadius: 8,
    marginVertical: spacing.medium,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: colors.primary,
  },
  addCustomSectionText: {
    color: colors.white,
    fontSize: Fonts.normal,
    fontWeight: 'bold',
  },
});

export default CreateCVScreen;
